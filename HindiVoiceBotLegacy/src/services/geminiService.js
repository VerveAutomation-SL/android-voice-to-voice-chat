import { GEMINI_API_KEY } from '@env';
console.log('ЁЯФС Loaded Gemini Key:', GEMINI_API_KEY);

// тЬЕ Unified Gemini request with language-aware prompt hint
export async function getGeminiResponse(spokenText, language = 'en-US') {
  if (!spokenText || !spokenText.trim()) return 'Please say something.';

  try {
    console.log(`ЁЯФЧ Sending prompt to Gemini (${language}):`, spokenText);

    // ЁЯТб Add a proper hint for each language
    const languageHint = {
      'hi-IN': 'рдЕрдм рд╕реЗ рд╕рднреА рдЙрддреНрддрд░ рдХреЗрд╡рд▓ рд╣рд┐рдВрджреА (рджреЗрд╡рдирд╛рдЧрд░реА рд▓рд┐рдкрд┐) рдореЗрдВ рджреАрдЬрд┐рдПред рд╕рд░рд▓ рд╢рдмреНрджреЛрдВ рдХрд╛ рдкреНрд░рдпреЛрдЧ рдХрд░реЗрдВред',
      'ta-IN': 'роЗройро┐ ро╡ро░рпБроорпН роЕройрпИродрпНродрпБ рокродро┐ро▓рпНроХро│рпБроорпН родрооро┐ро┤рпН роорпКро┤ро┐ропро┐ро▓рпН роЗро░рпБроХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН. роОро│ро┐роп родрооро┐ро┤рпН ро╡ро╛ро░рпНродрпНродрпИроХро│рпИрокрпН рокропройрпНрокроЯрпБродрпНродрпБроЩрпНроХро│рпН.',
      'si-LK': 'р╢Фр╢╢р╖Ъ р╖Гр╖Тр╢║р╢╜р╖Ф р╢┤р╖Тр╖Ер╖Тр╢нр╖Фр╢╗р╖Ф р╖Гр╖Тр╢Вр╖Др╢╜ р╢╖р╖Пр╖Вр╖Пр╖Ар╖Щр╢▒р╖К (р╖Гр╖Тр╢Вр╖Др╢╜ р╢Ер╢Ър╖Фр╢╗р╖Ф р╖Ар╢╜р╖Тр╢▒р╖К) р╢╜р╢╢р╖П р╢пр╖Щр╢▒р╖Кр╢▒.',
      'ms-MY': 'Sila jawab dalam Bahasa Melayu sahaja, dengan ayat mudah difahami.',
      'zh-CN': 'шп╖ф╗Еф╜┐чФиф╕нцЦЗя╝ИчоАф╜Уя╝ЙхЫЮчнФя╝Мф╜┐чФичоАхНХчЪДхПехнРшбиш╛╛уАВ',
      'en-US': 'Reply only in English, using clear and short sentences.',
    }[language] || 'Reply naturally in the same language as the user.';

    const prompt = `
You are a multilingual assistant.
User may speak Sinhala, Tamil, Hindi, Malay, Chinese, or English.
Their text might contain mixed or distorted words.
1я╕ПтГг Detect the intended language.
2я╕ПтГг Reply naturally in that same language тАФ short, friendly, and contextually appropriate.
3я╕ПтГг Use the native script.

${languageHint}

User said:
${spokenText}
`;

    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=${GEMINI_API_KEY}`,
      {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          contents: [{ parts: [{ text: prompt }] }],
        }),
      }
    );

    if (!response.ok) {
      console.error('тЭМ Gemini HTTP error:', response.status, await response.text());
      return getFallbackError(language);
    }

    const data = await response.json();
    const text =
      data?.candidates?.[0]?.content?.parts?.[0]?.text?.trim() ||
      getFallbackText(language);

    console.log('тЬЕ Gemini raw response:', text);
    return text;
  } catch (error) {
    console.error('тЭМ Gemini API error:', error);
    return getFallbackError(language);
  }
}

function getFallbackError(language) {
  const fallback = {
    'hi-IN': 'рд╕рд░реНрд╡рд░ рд╕реЗ рдХрдиреЗрдХреНрд╢рди рдореЗрдВ рд╕рдорд╕реНрдпрд╛ рд╣реБрдИред',
    'ta-IN': 'роЪро░рпНро╡ро░рпН роЗрогрпИрокрпНрокро┐ро▓рпН роЪро┐роХрпНроХро▓рпН роПро▒рпНрокроЯрпНроЯродрпБ.',
    'si-LK': 'р╖Гр╢╗р╖Кр╖Ар╢╗р╖К р╖Гр╢╕р╖Кр╢╢р╢▒р╖Кр╢░р╢нр╖Пр╖Ар╢║р╖Ъ р╢Ьр╖Рр╢зр╢╜р╖Фр╖Ар╢Ър╖К р╢Зр╢нр╖Тр╖А р╢Зр╢н.',
    'ms-MY': 'Terdapat masalah sambungan pelayan.',
    'zh-CN': 'цЬНхКбхЩиш┐ЮцОехЗ║чО░щЧощвШуАВ',
    'en-US': 'There was a problem connecting to the server.',
  };
  return fallback[language] || fallback['en-US'];
}

function getFallbackText(language) {
  const fallback = {
    'hi-IN': 'рдореБрдЭреЗ рд╕рдордЭ рдореЗрдВ рдирд╣реАрдВ рдЖрдпрд╛ред рдХреГрдкрдпрд╛ рджреЛрдмрд╛рд░рд╛ рдХрд╣реЗрдВред',
    'ta-IN': 'роОройроХрпНроХрпБ рокрпБро░ро┐ропро╡ро┐ро▓рпНро▓рпИ. роорпАрогрпНроЯрпБроорпН роЪрпКро▓рпНро▓ро╡рпБроорпН.',
    'si-LK': 'р╢╕р╢з р╢нр╖Ър╢╗р╖Щр╢▒р╖Кр╢▒р╖Ъ р╢▒р╖Рр╖Др╖Р. р╢Ър╢╗р╖Фр╢лр╖Пр╢Ър╢╗ р╢▒р╖Рр╖Ар╢н р╢Ър╖Тр╢║р╢▒р╖Кр╢▒.',
    'ms-MY': 'Saya tidak faham. Sila ulang semula.',
    'zh-CN': 'цИСф╕НцШОчЩ╜уАВшп╖хЖНшп┤ф╕АщБНуАВ',
    'en-US': "I didn't understand. Please repeat.",
  };
  return fallback[language] || fallback['en-US'];
}
