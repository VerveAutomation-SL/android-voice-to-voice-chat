import { GEMINI_API_KEY } from '@env';

/**
 * Sends the user's text (Hindi/Tamil) to Gemini and gets a reply.
 * @param {string} prompt - The full prompt (includes prefix from UI)
 * @param {string} language - Optional language code like 'hi-IN' or 'ta-IN'
 * @returns {Promise<string>} - Gemini-generated reply text
 */
export async function getGeminiResponse(prompt, language ) {
  if (!prompt || !prompt.trim()) return 'рдХреГрдкрдпрд╛ рдХреБрдЫ рдмреЛрд▓рд┐рдПред';

  try {
    console.log(`ЁЯФЧ Sending prompt to Gemini (${language}):`, prompt);

    const languageHint =
      language === 'ta-IN'
        ? 'роЗройро┐ ро╡ро░рпБроорпН роЕройрпИродрпНродрпБ рокродро┐ро▓рпНроХро│рпБроорпН роорпБро┤рпБроорпИропро╛роХ родрооро┐ро┤рпН роорпКро┤ро┐ропро┐ро▓рпН роЗро░рпБроХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН. роОро│ро┐роп родрооро┐ро┤рпН ро╡ро╛ро░рпНродрпНродрпИроХро│ро┐ро▓рпН роороЯрпНроЯрпБроорпН рокродро┐ро▓ро│ро┐.'
        : 'рдЕрдм рд╕реЗ рд╕рднреА рдЙрддреНрддрд░ рдХреЗрд╡рд▓ рд╣рд┐рдВрджреА рдореЗрдВ рджреАрдЬрд┐рдПред рд╕рд░рд▓ рд╣рд┐рдВрджреА рд╢рдмреНрджреЛрдВ рдХрд╛ рдкреНрд░рдпреЛрдЧ рдХрд░реЗрдВред';

    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1/models/gemini-2.5-flash:generateContent?key=${GEMINI_API_KEY}`,
      {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          contents: [
            {
              parts: [
                {
                  text: `${languageHint}\nрокропройро░рпН роХрпВро▒ро┐ропродрпБ / рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдиреЗ рдХрд╣рд╛:\n${prompt}`,
                },
              ],
            },
          ],
        }),
      }
    );

    if (!response.ok) {
      console.error('тЭМ Gemini API HTTP error:', response.status, await response.text());
      return language === 'ta-IN'
        ? 'роЪро░рпНро╡ро░ро┐ро▓рпН роЗро░рпБроирпНродрпБ роЪро░ро┐ропро╛рой рокродро┐ро▓рпН роЗро▓рпНро▓рпИ.'
        : 'рд╕рд░реНрд╡рд░ рд╕реЗ рд╕рд╣реА рдЙрддреНрддрд░ рдирд╣реАрдВ рдорд┐рд▓рд╛ред';
    }

    const data = await response.json();
    console.log('тЬЕ Gemini raw response:', JSON.stringify(data, null, 2));

    const text =
      data?.candidates?.[0]?.content?.parts?.[0]?.text ||
      (language === 'ta-IN'
        ? 'роОройроХрпНроХрпБ рокрпБро░ро┐ропро╡ро┐ро▓рпНро▓рпИ. роорпАрогрпНроЯрпБроорпН роЪрпКро▓рпНро▓ро╡рпБроорпН.'
        : 'рдореБрдЭреЗ рд╕рдордЭ рдореЗрдВ рдирд╣реАрдВ рдЖрдпрд╛ред рдХреГрдкрдпрд╛ рджреЛрдмрд╛рд░рд╛ рдХрд╣реЗрдВред');

    return text;
  } catch (error) {
    console.error('тЭМ Gemini API error:', error);
    return language === 'ta-IN'
      ? 'роЪро░рпНро╡ро░рпН роЗрогрпИрокрпНрокро┐ро▓рпН роЪро┐роХрпНроХро▓рпН роПро▒рпНрокроЯрпНроЯродрпБ.'
      : 'рд╕рд░реНрд╡рд░ рд╕реЗ рдХрдиреЗрдХреНрд╢рди рдореЗрдВ рд╕рдорд╕реНрдпрд╛ рд╣реБрдИред';
  }
}
